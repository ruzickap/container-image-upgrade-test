name: container-image-upgrade-test

on:
  workflow_dispatch:
    inputs:
      vulnerability_scanner_grype:
        description: "Grype Vulnerability Scanner"
        type: boolean
        required: false
        default: false
      vulnerability_scanner_trivy:
        description: "Trivy Vulnerability Scanner"
        type: boolean
        required: false
        default: true

env:
  container_image_authors: petr.ruzicka@gmail.com
  container_image_authors_name: Petr Ruzicka
  container_image_category: security
  container_image_logo_url: https://raw.githubusercontent.com/MISP/intelligence-icons/513abc840b7ac92e4f8a4a7ecab2964007bf25f5/svg/threat_actor.svg
  container_image_vendor: MyCompany

defaults:
  run:
    shell: bash -euxo pipefail {0}

permissions: read-all

jobs:
  container-image-upgrade-test:
    name: "Container image - ${{ matrix.container-image }}"
    runs-on: ubuntu-latest
    timeout-minutes: 30
    continue-on-error: true
    strategy:
      matrix:
        container-image:
          - docker.io/alpine:latest
          - docker.io/debian:buster-slim
          # - docker.io/debian:stable-slim
          # - docker.io/nginx:alpine-slim
          # - docker.io/nginx:latest
          # - docker.io/node:latest
          # - docker.io/node:slim
          # - docker.io/openjdk:latest
          # - docker.io/php:latest
          # - docker.io/python:alpine
          # - docker.io/python:slim
          # - docker.io/ruby:alpine
          # - docker.io/ruby:latest
          # - docker.io/ruby:slim
          # - docker.io/ubuntu:latest
          # - gcr.io/distroless/base-debian12:latest
          # - gcr.io/distroless/java-debian12:latest
          # - gcr.io/distroless/nodejs-debian12:latest
          # - gcr.io/distroless/python3-debian12:latest
          # - gcr.io/distroless/static-debian12:latest
          # - gcr.io/distroless/static:latest
          # - registry.access.redhat.com/ubi9-micro:latest
          # - registry.access.redhat.com/ubi9-minimal:latest
          # - registry.access.redhat.com/ubi9/nodejs-22-minimal:latest
          # - registry.access.redhat.com/ubi9/nodejs-22:latest
          # - registry.access.redhat.com/ubi9/openjdk-21-runtime:latest
          # - registry.access.redhat.com/ubi9/php-82:latest
          # - registry.access.redhat.com/ubi9/python-312:latest
          # - registry.access.redhat.com/ubi9/ruby-33:latest
          - registry.access.redhat.com/ubi9/ubi:latest

    steps:
      - name: "📥 Checkout Code"
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: "⚙️ Prepare Dockerfile and environment variables"
        env:
          CONTAINER_IMAGE: ${{ matrix.container-image }}
        run: |
          sed -i "s|^FROM .*|FROM ${CONTAINER_IMAGE}|" Dockerfile
          cat Dockerfile
          echo '${{ toJSON(github.event.repository.topics) }}' | jq -r '. | join(",") | "GITHUB_REPOSITORY_TOPICS=\(.)"' | tee -a "${GITHUB_ENV}"
          echo "DOCKER_META_IMAGES=\"my-updated_${CONTAINER_IMAGE//[.\/:]/-}\"" | tee -a "${GITHUB_ENV}"

      - name: "🔧 Set up Docker Buildx"
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: "📝 Docker metadata"
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        id: docker_meta
        with:
          images: ${{ env.DOCKER_META_IMAGES }}
          tags: |
            type=raw,value=latest
          labels: |
            ## Container images repositories: https://artifacthub.io/docs/topics/repositories/container-images/
            # keep-sorted start sticky_comments=no
            # org.opencontainers.image.created - it is there by default
            # org.opencontainers.image.description - it is there by default (repository description)
            # org.opencontainers.image.source - it is there by default
            # org.opencontainers.image.title - it is there by default
            # org.opencontainers.image.url - it is there by default
            # org.opencontainers.image.version - it is there by default
            io.artifacthub.package.category=${{ env.container_image_category }}
            io.artifacthub.package.keywords=${{ env.GITHUB_REPOSITORY_TOPICS }}
            io.artifacthub.package.license=${{ github.event.repository.license.spdx_id }}
            io.artifacthub.package.logo-url=${{ env.container_image_logo_url || 'https://raw.githubusercontent.com/kubernetes/community/487f994c013ea61d92cf9a341af7620037abbce3/icons/svg/resources/unlabeled/pod.svg' }}
            io.artifacthub.package.maintainers=[{"name":"${{ env.container_image_authors_name }}","email":"${{ env.container_image_authors }}"}]
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/${{ github.sha }}/README.md
            org.opencontainers.image.documentation=${{ github.event.repository.html_url }}/blob/${{ github.sha }}/README.md
            org.opencontainers.image.vendor=${{ env.container_image_vendor }}
            # keep-sorted end

            ## The OpenContainers Annotations Spec: https://specs.opencontainers.org/image-spec/annotations/?v=v1.0.1#pre-defined-annotation-keys
            # keep-sorted start sticky_comments=no
            # org.opencontainers.image.created - it is there by default
            # org.opencontainers.image.description - it is there by default (repository description)
            # org.opencontainers.image.documentation - already set
            # org.opencontainers.image.licenses - it is there by default
            # org.opencontainers.image.revision - it is there by default
            # org.opencontainers.image.source - it is there by default
            # org.opencontainers.image.title - it is there by default
            # org.opencontainers.image.url - it is there by default
            # org.opencontainers.image.vendor - already set
            # org.opencontainers.image.version - it is there by default
            org.opencontainers.image.authors=${{ env.container_image_authors }}
            org.opencontainers.image.ref.name=${{ github.ref_name }}
            # keep-sorted end

            ## Label Schema Convention: https://github.com/badouralix/dockerfiles/blob/c91181b356f92574f26d0499ee3d2be2cacd0952/LABELS.md
            # keep-sorted start sticky_comments=no
            com.github.actions.event_name=${{ github.event_name }}
            com.github.actions.job=${{ github.job }}
            com.github.actions.run_id=${{ github.run_id }}
            com.github.actions.run_url=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            # keep-sorted end

      - name: "🐳 Build temporary container image"
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        id: docker-build-push
        env:
          DOCKER_BUILD_SUMMARY: false
        with:
          load: true
          context: .
          annotations: ${{ steps.docker_meta.outputs.labels }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          tags: ${{ steps.docker_meta.outputs.tags }}

      - name: "🔎 Grype - Scan container image - ${{ steps.docker_meta.outputs.tags }}"
        if: ${{ github.event.inputs.vulnerability_scanner_grype == 'true' }}
        uses: anchore/scan-action@2c901ab7378897c01b8efaa2d0c9bf519cc64b9e # v6.2.0
        id: grype_scan_built_container_image
        with:
          image: ${{ steps.docker_meta.outputs.tags }}
          # report vulnerabilities that have a confirmed fix - https://github.com/anchore/grype#showing-only-fixed-vulnerabilities
          only-fixed: true
          output-format: table
          fail-build: false

      - name: "📝 Add Grype summary - ${{ steps.docker_meta.outputs.tags }}"
        if: ${{ github.event.inputs.vulnerability_scanner_grype == 'true' }}
        env:
          CONTAINER_IMAGE: ${{ steps.docker_meta.outputs.tags }}
          GRYPE_SCAN_OUTPUT_FILE: ${{ steps.grype_scan_built_container_image.outputs.scan-results-path }}
        run: |
          cat > "${GITHUB_SUMMARY}" << EOF
          ## 🛡️ Grype Scan Summary for ${CONTAINER_IMAGE}
          \`\`\`
          $(cat "${GRYPE_SCAN_OUTPUT_FILE}")
          \`\`\`
          EOF

      - name: "🔎 Grype - Scan container image - ${{ matrix.container-image }}"
        if: ${{ github.event.inputs.vulnerability_scanner_grype == 'true' }}
        uses: anchore/scan-action@2c901ab7378897c01b8efaa2d0c9bf519cc64b9e # v6.2.0
        id: grype_scan
        with:
          image: ${{ matrix.container-image }}
          only-fixed: true
          output-format: table
          fail-build: false

      - name: "📝 Add Grype summary - ${{ matrix.container-image }}"
        if: ${{ github.event.inputs.vulnerability_scanner_grype == 'true' }}
        env:
          CONTAINER_IMAGE: ${{ matrix.container-image }}
          GRYPE_SCAN_OUTPUT_FILE: ${{ steps.grype_scan.outputs.scan-results-path }}
        run: |
          cat > "${GITHUB_SUMMARY}" << EOF
          ## 🛡️ Grype Scan Summary for ${CONTAINER_IMAGE}
          \`\`\`
          $(cat "${GRYPE_SCAN_OUTPUT_FILE}")
          \`\`\`
          EOF

      - name: "🔎 Trivy - Scan container image - ${{ steps.docker_meta.outputs.tags }}"
        if: ${{ github.event.inputs.vulnerability_scanner_trivy == 'true' }}
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # 0.30.0
        with:
          image-ref: ${{ steps.docker_meta.outputs.tags }}
          # https://trivy.dev/v0.22.0/vulnerability/examples/filter/
          ignore-unfixed: true
          format: table
          output: trivy-output.txt

      - name: "📝 Add Trivy summary - ${{ steps.docker_meta.outputs.tags }}"
        if: ${{ github.event.inputs.vulnerability_scanner_trivy == 'true' }}
        env:
          CONTAINER_IMAGE: ${{ steps.docker_meta.outputs.tags }}
          TRIVY_SCAN_OUTPUT_FILE: trivy-output.txt
        run: |
          cat > "${GITHUB_SUMMARY}" << EOF
          ## 🛡️ Trivy Scan Summary for ${CONTAINER_IMAGE}
          \`\`\`
          $(cat "${TRIVY_SCAN_OUTPUT_FILE}")
          \`\`\`
          EOF

      - name: "🔎 Trivy - Scan container image - ${{ matrix.container-image }}"
        if: ${{ github.event.inputs.vulnerability_scanner_trivy == 'true' }}
        uses: aquasecurity/trivy-action@6c175e9c4083a92bbca2f9724c8a5e33bc2d97a5 # 0.30.0
        with:
          image-ref: ${{ matrix.container-image }}
          ignore-unfixed: true
          format: table
          output: trivy-output.txt

      - name: "📝 Add Trivy summary - ${{ matrix.container-image }}"
        if: ${{ github.event.inputs.vulnerability_scanner_trivy == 'true' }}
        env:
          CONTAINER_IMAGE: ${{ matrix.container-image }}
          TRIVY_SCAN_OUTPUT_FILE: trivy-output.txt
        run: |
          cat > "${GITHUB_SUMMARY}" << EOF
          ## 🛡️ Trivy Scan Summary for ${CONTAINER_IMAGE}
          \`\`\`
          $(cat "${TRIVY_SCAN_OUTPUT_FILE}")
          \`\`\`
          EOF
